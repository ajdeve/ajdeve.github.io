<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NLP Classification on</title><link>https://ajdeve.github.io/docs/project1/</link><description>Recent content in NLP Classification on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 14 Mar 2022 08:48:45 +0000</lastBuildDate><atom:link href="https://ajdeve.github.io/docs/project1/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://ajdeve.github.io/docs/project1/introduction/</link><pubDate>Mon, 14 Mar 2022 08:48:45 +0000</pubDate><guid>https://ajdeve.github.io/docs/project1/introduction/</guid><description>Amazon Review Analysis &amp;amp; Application # Project Objective: # To help amazon optimize and improve its overall ecommerce experience through the scope of customer and seller
Project Approach: # Helpful reviews result in better sales performance, less return, and a higher conversion rate. â€‹â€‹ # ðŸ‘‰ Predict helpful reviews (0,1) before the review receives any traction and customers' votes on its helpfulness (classification). In return, Amazon can better understand how to rank their reviews, and sellers can identify helpful reviews and use them to improve selling strategies and products.</description></item><item><title>EDA</title><link>https://ajdeve.github.io/docs/project1/eda/</link><pubDate>Mon, 14 Mar 2022 08:48:45 +0000</pubDate><guid>https://ajdeve.github.io/docs/project1/eda/</guid><description>Initial General EDA # General EDA Top2Vec # Intention of running topical modelling on review column of dataset is to check whether it holds sufficient information for us to move forward with our project, and the breadth and depth of information in reviews is hard to capture manually given large dataset.
Import Spark NLP and import Top2Vec # #Spark NLP import sparknlp from sparknlp.pretrained import PretrainedPipeline from sparknlp.annotator import * from sparknlp.</description></item><item><title>Data Preparation</title><link>https://ajdeve.github.io/docs/project1/dataprep/</link><pubDate>Mon, 14 Mar 2022 08:48:45 +0000</pubDate><guid>https://ajdeve.github.io/docs/project1/dataprep/</guid><description>Data Preparation # Remove NaN
Get Products With Total Votes &amp;gt; 10
df = df.filter(col('total_votes') &amp;gt; 10) df.count() Combine review_headline with review_body to create review text By doing so, we can minimize information loss by reducing number of null rows by combining both columns, as they have different number of null rows. df = df.fillna(&amp;quot;&amp;quot;, &amp;quot;review_body&amp;quot;) df = df.fillna(&amp;quot;&amp;quot;, &amp;quot;review_headline&amp;quot;) df = df.withColumn('review_text', F.concat('review_headline', F.lit(&amp;quot; &amp;quot;), 'review_body')) df.show(1, vertical = True, truncate = False) Create Helpful Ratio &amp;amp; Helful column for our modelling Helpful Ratio: helpful_votes/ total votes â€‹ Created Column Helpful: â€‹</description></item><item><title>Modelling</title><link>https://ajdeve.github.io/docs/project1/modelling/</link><pubDate>Mon, 14 Mar 2022 08:48:45 +0000</pubDate><guid>https://ajdeve.github.io/docs/project1/modelling/</guid><description>Recap # Amazon reviews that are voted as helpful are assumed to be reviews that people will naturally want to read more ofâ€‹ Reviews are an important part of the consumer&amp;rsquo;s purchasing decisions. They are just as, if not more important than star ratings that are not descriptive enoughâ€‹ However, reviews may not have enough helpfulness score if it is new and has yet to gain any traction. Lack of participation and feedback from other purchasers can also lead to insufficient scoringâ€‹ Therefore, prediction of review helpfulness before other users even see them can help Amazon push these reviews up and provide a better consumer buying experienceâ€‹ Classification problems = classifier models; Text data = natural language processing</description></item><item><title>Result</title><link>https://ajdeve.github.io/docs/project1/result/</link><pubDate>Mon, 14 Mar 2022 08:48:45 +0000</pubDate><guid>https://ajdeve.github.io/docs/project1/result/</guid><description>Result of Logistic Regression &amp;amp; Random Forest # Product Category Logistic Regression Random Forest Books 0.85 / 0.84 0.83 / 0.83 E-Books 0.98 / 0.71 0.77 / 0.78 Music 0.85 / 0.83 0.72 / 0.72 Digital Music 0.82 / 0.74 0.67 / 0.68 DVD 0.80 / 0.78 0.68 / 0.68 Digital Video 0.78 / 0.72 0.66 / 0.65 Software 0.94 / 0.82 0.86 / 0.86 Digital Software 0.99 / 0.84 0.</description></item></channel></rss>